<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASCII 表(控制字符和可显示字符)</title>
    <url>/Appendix/ASCII/</url>
    <content><![CDATA[<p>ASCII（American Standard Code for Information Interchange，美国信息互换标准代码，ASCII）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IEC 646。</p>
<p>ASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符，其中33个字符无法显示（这是以现今操作系统为依归，但在DOS模式下可显示出一些诸如笑脸、扑克牌花式等8-bit符号），且这33个字符多数都已是陈废的控制字符，控制字符的用途主要是用来操控已经处理过的文字，在33个字符之外的是95个可显示的字符，包含用键盘敲下空白键所产生的空白字符也算1个可显示字符（显示为空白）。</p>
<span id="more"></span>
<p><img src="https://img-blog.csdnimg.cn/20200621180620179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RMRFhfWElPTkc=,size_16,color_FFFFFF,t_70#pic_center" alt="ASCII" /> 下面是ASCII控制字符在DOS系统下的ASCII表 <img src="https://img-blog.csdnimg.cn/20200621181046373.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RMRFhfWElPTkc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>
]]></content>
      <categories>
        <category>Appendix</category>
      </categories>
      <tags>
        <tag>ASCII</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML special symbol</title>
    <url>/Appendix/HTML-special-symbol/</url>
    <content><![CDATA[<table>
<thead>
<tr class="header">
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">α</td>
<td style="text-align: center;">&amp;alpha；</td>
<td style="text-align: center;">β</td>
<td style="text-align: center;">&amp;beta；</td>
<td style="text-align: center;">χ</td>
<td style="text-align: center;">&amp;chi；</td>
</tr>
<tr class="even">
<td style="text-align: center;">δ</td>
<td style="text-align: center;">&amp;delta；</td>
<td style="text-align: center;">ε</td>
<td style="text-align: center;">&amp;epsilon；</td>
<td style="text-align: center;">η</td>
<td style="text-align: center;">&amp;eta；</td>
</tr>
<tr class="odd">
<td style="text-align: center;">γ</td>
<td style="text-align: center;">&amp;gamma；</td>
<td style="text-align: center;">ι</td>
<td style="text-align: center;">&amp;iota；</td>
<td style="text-align: center;">κ</td>
<td style="text-align: center;">&amp;kappa；</td>
</tr>
<tr class="even">
<td style="text-align: center;">λ</td>
<td style="text-align: center;">&amp;lambda；</td>
<td style="text-align: center;">μ</td>
<td style="text-align: center;">&amp;mu；</td>
<td style="text-align: center;">ν</td>
<td style="text-align: center;">&amp;nu；</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ω</td>
<td style="text-align: center;">&amp;omega；</td>
<td style="text-align: center;">ο</td>
<td style="text-align: center;">&amp;omicron；</td>
<td style="text-align: center;">φ</td>
<td style="text-align: center;">&amp;phi；</td>
</tr>
<tr class="even">
<td style="text-align: center;">π</td>
<td style="text-align: center;">&amp;pi；</td>
<td style="text-align: center;">ψ</td>
<td style="text-align: center;">&amp;psi；</td>
<td style="text-align: center;">ρ</td>
<td style="text-align: center;">&amp;rho；</td>
</tr>
<tr class="odd">
<td style="text-align: center;">σ</td>
<td style="text-align: center;">sigma；</td>
<td style="text-align: center;">τ</td>
<td style="text-align: center;">&amp;tau；</td>
<td style="text-align: center;">θ</td>
<td style="text-align: center;">&amp;theta；</td>
</tr>
<tr class="even">
<td style="text-align: center;">υ</td>
<td style="text-align: center;">&amp;upsilon；</td>
<td style="text-align: center;">ξ</td>
<td style="text-align: center;">&amp;xi；</td>
<td style="text-align: center;">ζ</td>
<td style="text-align: center;">&amp;zeta；</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<table style="width:7%;">
<colgroup>
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>|符号|编码|符号|编码|符号|编码| |:--:|:--:|:--:|:--:|:--:|:--:| |Α|&amp;Alpha；|Β|&amp;Beta；|Χ|&amp;Chi；| |Δ|&amp;Delta；|Ε|&amp;Epsilon；|Η|&amp;Eta；| |Γ|&amp;Gamma；|Ι|&amp;Iota；|Κ|&amp;Kappa；| |Λ|&amp;Lambda；|Μ|&amp;Mu；|Ν|&amp;Nu；| |Ω|&amp;Omega；|Ο|&amp;Omicron；|Φ|&amp;Phi；| |Π|&amp;Pi；|Ψ|&amp;Psi；|Ρ|&amp;Rho； |Σ|&amp;Sigma；|Τ|&amp;Tau；|Θ|&amp;Theta；| |Υ|&amp;Upsilon；|Ξ|&amp;Xi；|Ζ|&amp;Zeta；</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>|符号|编码|符号|编码|符号|编码| |:--:|:--:|:--:|:--:|:--:|:--:| |€|&amp;euro；|£|&amp;pound；|¥|&amp;yen；</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">©</td>
<td style="text-align: center;">&amp;copy；</td>
<td style="text-align: center;">°</td>
<td style="text-align: center;">&amp;deg；</td>
<td style="text-align: center;">÷</td>
<td style="text-align: center;">&amp;divide；</td>
</tr>
<tr class="even">
<td style="text-align: center;">⅓</td>
<td style="text-align: center;">&amp;frac13；</td>
<td style="text-align: center;">¼</td>
<td style="text-align: center;">&amp;frac14；</td>
<td style="text-align: center;">®</td>
<td style="text-align: center;">&amp;reg；</td>
</tr>
<tr class="odd">
<td style="text-align: center;">§</td>
<td style="text-align: center;">&amp;sect；</td>
<td style="text-align: center;">×</td>
<td style="text-align: center;">&amp;times；</td>
<td style="text-align: center;">™</td>
<td style="text-align: center;">&amp;trade；</td>
</tr>
<tr class="even">
<td style="text-align: center;">•</td>
<td style="text-align: center;">&amp;bull；</td>
<td style="text-align: center;">¢</td>
<td style="text-align: center;">&amp;cent；</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<hr />
<table>
<thead>
<tr class="header">
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
<th style="text-align: center;">符号</th>
<th style="text-align: center;">编码</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">≈</td>
<td style="text-align: center;">&amp;asymp；</td>
<td style="text-align: center;">≥</td>
<td style="text-align: center;">&amp;ge；</td>
<td style="text-align: center;">≤</td>
<td style="text-align: center;">&amp;le；</td>
</tr>
<tr class="even">
<td style="text-align: center;">≠</td>
<td style="text-align: center;">&amp;ne；</td>
<td style="text-align: center;">∑</td>
<td style="text-align: center;">&amp;sum；</td>
<td style="text-align: center;">√</td>
<td style="text-align: center;">&amp;radic；</td>
</tr>
<tr class="odd">
<td style="text-align: center;">♣</td>
<td style="text-align: center;">&amp;clubs；</td>
<td style="text-align: center;">♦</td>
<td style="text-align: center;">&amp;diams；</td>
<td style="text-align: center;">♥</td>
<td style="text-align: center;">&amp;hearts；</td>
</tr>
<tr class="even">
<td style="text-align: center;">♠</td>
<td style="text-align: center;">&amp;spades；</td>
<td style="text-align: center;">↔︎</td>
<td style="text-align: center;">&amp;harr；</td>
<td style="text-align: center;">∩</td>
<td style="text-align: center;">&amp;cap；</td>
</tr>
<tr class="odd">
<td style="text-align: center;">∞</td>
<td style="text-align: center;">&amp;infin；</td>
<td style="text-align: center;">∫</td>
<td style="text-align: center;">&amp;int；</td>
<td style="text-align: center;">↑</td>
<td style="text-align: center;">&amp;uarr；</td>
</tr>
<tr class="even">
<td style="text-align: center;">↓</td>
<td style="text-align: center;">&amp;darr；</td>
<td style="text-align: center;">←</td>
<td style="text-align: center;">&amp;larr；</td>
<td style="text-align: center;">→</td>
<td style="text-align: center;">&amp;rarr；</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Appendix</category>
      </categories>
      <tags>
        <tag>special symbol</tag>
      </tags>
  </entry>
  <entry>
    <title>functions of matlab</title>
    <url>/Matlab/functions-of-MATLAB/</url>
    <content><![CDATA[<h3 id="what-i-learn-today">WHAT I LEARN TODAY</h3>
<h4 id="hist-函数用法">1. <code>hist</code> 函数用法</h4>
<blockquote>
<p>hist 有直方图的意思，MATLAB 中绘制直方图的函数是 hist用法是 hist(y,x)，表示以向量 x 的各个元素为统计范围，绘制 y 的分布情况。下面是它的具体用法案例。</p>
</blockquote>
<ol type="1">
<li>N=hist(Y) 将向量 Y 的元素平均分配到十个等间隔的容器中，而且返回每个容器的元素个数。如果 Y 是一个矩阵，hist 指令逐列执行(此时省略 x 则默认为 10)</li>
<li>N=hist(Y,X) 将向量 Y 的元素平均分配到 X 个等间隔的容器中，而且返回每个容器的元素个数。如果 Y 是一个矩阵，hist 指令逐列执行</li>
</ol>
<span id="more"></span>
<h4 id="linprog函数用法">2. <code>linprog</code>函数用法</h4>
<blockquote>
<p>linprog 是 MATLAB 中用于求解线性规划问题的指令函数。具体用法如下</p>
</blockquote>
Matlab 中线性规划的标准型为：
<center>
<p>min c<sup>T</sup>*x</p>
A<em>x&lt;=b Aeq</em>x=beq lb&lt;=x&lt;=ub
</center>
linprog 函数的基本形式为 lingprog(c,A,b)，返回值为向量 x 的值。它的标准形式如下：
<center>
[x,fval]=linprog(c,a,b,aeq,beq,lb,ub,x0,options)
</center>
<p>fval 返回目标函数的值，lb 和 ub 分别是变量 x 的取值上界和下界，x0 是 x 的初始值，options 此处是控制参数。</p>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>hist</tag>
        <tag>linprog</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab and lingo</title>
    <url>/Matlab/matlab-and-lingo/</url>
    <content><![CDATA[<h3 id="matlab-and-lingo">MATLAB AND LINGO</h3>
<ul>
<li><h4 id="diff-函数">diff 函数</h4>
diff(f): 对 f 求导 diff(f,t): df/dt 或者 ∂f/∂t diff(f,n): 对 f 求 n 阶导数 diff(f,n,t): 高阶导数 d<sup>n</sup>f/dt<sup>n</sup>（或者 ∂<sup>n</sup>f/∂t<sup>n</sup>） <span id="more"></span></li>
<li><h4 id="int-函数">int 函数</h4>
int(f,t): ∫ƒ(t)dt int(f,t,a,b): 求 a 到 b 的定积分</li>
<li><h4 id="quad-函数">quad 函数</h4>
quad(f,a,b): 求定积分的近似值</li>
<li><h4 id="dsolve-函数">dsolve 函数</h4>
dsolve('eqn','con','v'): 关于变量 v 在初值条件 con 下求解微分方程</li>
<li><h4 id="fsolve-函数">fsolve 函数</h4>
fsolve(funs,x0): 对方程组 funs，以向量 x0 为初值求近似解</li>
<li><h4 id="solve-函数">solve 函数</h4>
solve(s): 对方程中变量 x 求解 solve(s,v): 对方程中指定变量 v 求解 solve(s1,s2,s3,···,sn): 对 n 个方程默认变量求解 solve(s1,s2,s3,···,sn,v1,v2,···,vn): 对 n 个方程的指定变量求解</li>
<li><h4 id="roots-函数">roots 函数</h4>
roots(p): 求以 p 为系数的一元多项式方程的解</li>
<li><h4 id="fzero-函数">fzero 函数</h4>
fzero(fun,x0): 对一元方程 fun，以 x0 为初值求近似解</li>
<li><h4 id="matlab-二维数组">matlab 二维数组</h4>
MATLAB 对于二维数组的完整引用方式为：a(i,j) 其它方式： a(:,j): 表示选择第 j 列 a(i,:): 表示选择第 i 行 a(a:b,j): 表示选择第 j 列的第 a 到 b 行 a(i,a:b): 表示选择第 i 行的第 a 到 b 列</li>
<li><h4 id="线性最小二乘法">线性最小二乘法</h4>
最小二乘法是一种数学优化技术。通过最小化误差的平方和寻找数据的最佳函数匹配。也可用于<code>函数拟合</code> <strong>实例</strong> 实验得到四个数据 (x,y): (1,6)、(2,5)、(3,7)、(4,10)。希望找到一条和这四个点最匹配的直线：y=a+bx。因此有： **
<center>
a+1b=6<strong> </strong>a+2b=5<strong> </strong>a+3b=7<strong> </strong>a+4b=10
</center>
<strong> 最小二乘法采用的手段是尽量使得等号两边的方差最小：<br />
</strong>
<center>
S(a,b)=[6-(a+b)]<sup>2</sup> + [5-(a+2b)]<sup>2</sup> + [7-(a+3b)]<sup>2</sup> + [10-(a+4b)]<sup>2</sup>
</center>
**<br />
求解 min(a,b), 通过对 a,b 求偏导。再令两者偏导为零，得到 a 与 b 的值。此时的曲线便是最佳拟合曲线。 ---</li>
<li><h4 id="血液流动规律">血液流动规律</h4>
根据 poiseuille 定律，血液流过半径 r、长为 l 的一段血管 AC 时，流量： **
<center>
q=πr<sup>4</sup>Δp/8μl
</center>
<strong> ΔP 是 A，C 两点的压力差，μ 是血液的黏性系数。在血液流动过程中，机体克服阻力所消耗的能量为 E<sub>1</sub>=q·Δp,将上式中 Δp带入上式得： </strong>
<center>
E<sub>1</sub>=8μq<sup>2</sup>l/πr<sup>4</sup>
</center>
**</li>
</ul>
]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>diff</tag>
        <tag>int</tag>
        <tag>quad</tag>
        <tag>dsolve</tag>
        <tag>fsolve</tag>
        <tag>roots</tag>
        <tag>fzero</tag>
        <tag>最小二乘法</tag>
        <tag>血液流动规律</tag>
      </tags>
  </entry>
  <entry>
    <title>the usage of lingo</title>
    <url>/lingo/the-usage-of-lingo/</url>
    <content><![CDATA[<h3 id="usage-of-lingo">USAGE OF LINGO</h3>
<p>lingo 软件用于是解决规划问题的极佳求解工具，本文将简单介绍 lingo 的使用方法和语法。</p>
<span id="more"></span>
<ul>
<li><strong>SETS 的使用</strong> 为了定义 x<sub>i</sub>,a<sub>ij</sub>那么首先需要确定 i 和 j 的取值范围。 在 lingo 中用 <strong>sets</strong> 来表示 代码： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sets:</span><br><span class="line">Xb1 /<span class="number">1.</span><span class="number">.8</span>/;</span><br><span class="line">Xb2 /<span class="number">1.</span><span class="number">.6</span>/;</span><br><span class="line">endsets</span><br></pre></td></tr></table></figure> 其中 xb1，xb2 分别表示为下标 1..8，1..6，的名字，这些名字在 loop(下面将会介绍) 中要使用。对于命名规则同大多数程序设计语言一样：<strong>以字母或下划线开头</strong>。 <em>备注：lingo 语句不区分大小写</em> a(i,j) 的下标代码如下： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sets:</span><br><span class="line">Xb1 /<span class="number">1.</span><span class="number">.8</span>/;</span><br><span class="line">Xb2 /<span class="number">1.</span><span class="number">.6</span>/;</span><br><span class="line"><span class="built_in">Xb3</span>(Xb1,Xb2);</span><br><span class="line">endsets</span><br></pre></td></tr></table></figure> 这样就完成了下标定义，定义数组变量时则只需要在下标后加上<strong>冒号</strong>再写上变量名，代码如下： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sets:</span><br><span class="line">Xb1 /<span class="number">1.</span><span class="number">.8</span>/:x,c,b;</span><br><span class="line">Xb2 /<span class="number">1.</span><span class="number">.6</span>/:y;</span><br><span class="line"><span class="built_in">Xb3</span>(Xb1,Xb2):a;</span><br><span class="line">endsets</span><br></pre></td></tr></table></figure></li>
<li><strong>DATA 的使用</strong> 在 lingo 中吧常量理解为以经被赋予某常数的变量，在 DATA 中对一些变量赋值，使之成为常量。 代码如下： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sets:</span><br><span class="line">Xb1 /<span class="number">1.</span><span class="number">.8</span>/:x;</span><br><span class="line">Xb2 /<span class="number">1.</span><span class="number">.6</span>/:y;</span><br><span class="line"><span class="built_in">Xb3</span>(Xb1,Xb2):a;</span><br><span class="line">endsets</span><br><span class="line">data:</span><br><span class="line">a=<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>;</span><br><span class="line">x=<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>;</span><br><span class="line">y=<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>;</span><br><span class="line">enddata</span><br></pre></td></tr></table></figure></li>
<li><strong>变量类型</strong> <span class="citation" data-cites="Free">@Free</span>(x)语句：变量大小不受限制，即也可以取到负值<br />
<span class="citation" data-cites="Gin">@Gin</span>(x)语句：变量为整型 <span class="citation" data-cites="Bin">@Bin</span>(x)语句：变量为二进制，即非 0 即 1 <span class="citation" data-cites="bnd">@bnd</span>(L,x,U):限制到L&lt;=x&lt;=U 其中 x 是要改变类型的变量 <em>备注：如无任何限制，则变量默认为非负数</em></li>
<li><strong>Loop 语句</strong>
<ul>
<li><p><strong>for 语句</strong> 假定我们要定义 x<sub>i</sub> 为整型变量，一般我们要写如下代码： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">Gin</span>(<span class="built_in">x</span>(<span class="number">1</span>));</span><br><span class="line">@<span class="built_in">Gin</span>(<span class="built_in">x</span>(<span class="number">2</span>));</span><br><span class="line">@<span class="built_in">Gin</span>(<span class="built_in">x</span>(<span class="number">3</span>));</span><br><span class="line">@<span class="built_in">Gin</span>(<span class="built_in">x</span>(<span class="number">4</span>));</span><br><span class="line">@<span class="built_in">Gin</span>(<span class="built_in">x</span>(<span class="number">5</span>));</span><br><span class="line">@<span class="built_in">Gin</span>(<span class="built_in">x</span>(<span class="number">6</span>));</span><br><span class="line">@<span class="built_in">Gin</span>(<span class="built_in">x</span>(<span class="number">7</span>));</span><br><span class="line">@<span class="built_in">Gin</span>(<span class="built_in">x</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure> 显然这样太麻烦了。使用 for 语句就方便许多 <code>@for( xb1(i):@Gin( x(i) ) );</code> 就可以替代上面的输入工作了。其中 xb1 是已经定义的下标，变量 i 是索引变量 <strong>for 语句格式：</strong> <span class="citation" data-cites="for">@for</span>(set_name(索引变量):循环部分表达式) <code>@for( xb1(i):@Gin( x(i) ) );</code> 等价于 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    @<span class="built_in">Gin</span>(<span class="built_in">x</span>(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 二维循环也是类似： <code>@for( xb3(i,j):@gin( a(i,j) ) );</code> 等价于 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">6</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        @<span class="built_in">gin</span>(<span class="built_in">x</span>(i,j));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>sum 语句</strong> 在约束条件中经常会有求和产生，lingo 提供的 sum 语句能方便地表达，但必须要以 sets 为基础 <strong>sum 语句格式：</strong> <span class="citation" data-cites="sum">@sum</span>(set_name(索引变量):被累加变量表达式 &lt;= 常量(表达式)); <em>备注：累加部分只能是一条语句</em></p>
<p><code>@sum(xb2(i):b(i)*c(i)&lt;=V_name);</code> 同样，sum 语句也同样适用于多维变量</p></li>
<li><p><strong>max 语句</strong> <span class="citation" data-cites="max">@max</span>(set_name(索引变量)); 例如： <code>@max(xb1(i):b(i)*c(i))&lt;=33;</code> 也同样适用于多维变量</p></li>
<li><p><strong>min 语句</strong> 具体用法同 max 语句</p></li>
</ul></li>
<li><strong>lingo 函数</strong> lingo 提供了多种函数，包括：
<ol type="1">
<li>基本运算符</li>
<li>数学函数</li>
<li>金融函数</li>
<li>概率函数</li>
<li>变量界定函数</li>
<li>集操作函数</li>
<li>集循环函数</li>
<li>数据输入输出函数</li>
<li>辅助函数</li>
</ol></li>
</ul>
<p>下次将会介绍这些函数的使用</p>
]]></content>
      <categories>
        <category>lingo</category>
      </categories>
      <tags>
        <tag>sets</tag>
        <tag>data</tag>
        <tag>Loop</tag>
      </tags>
  </entry>
  <entry>
    <title>感知机算法证明</title>
    <url>/Machine-Learning/%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%AE%97%E6%B3%95%E8%AF%81%E6%98%8E/</url>
    <content><![CDATA[<h3 id="问题描述">1. 问题描述</h3>
<p>感知机算法的提出最初被用来解决二分类问题，即给定 <span class="math inline">\(N\)</span> 个样本，其中每个样本都是 <span class="math inline">\(p\)</span> 维的向量。每一个样本属于 <span class="math inline">\(C_1\)</span> 或 <span class="math inline">\(C_2\)</span>。我们的任务是找到一个超平面来将所有样本进行准确分类并且具有较强的泛化能力。 ### 2. 问题数学描述 这里我们将这类问题抽象为数学描述。我们假设 <span class="math inline">\(x_1,x_2,\ldots,x_N\)</span> 是 <span class="math inline">\(p\)</span> 维向量。然后我们将 <span class="math inline">\(\vec{x}_1,\vec{x}_2,...,\vec{x}_N\)</span> 定义为： 如果 <span class="math inline">\(x_i\in C_1\)</span>,则 <span class="math inline">\(\overrightarrow{x_i}=\begin{bmatrix}x_i\\1\end{bmatrix}\)</span>; 如果 <span class="math inline">\(x_i\in C_2\)</span>,则 <span class="math inline">\(\overrightarrow{x_i}=\begin{bmatrix}-x_i\\ -1\end{bmatrix}\)</span> 此时所有向量变成了 <span class="math inline">\(p+1\)</span> 维。这个问题也转变成了寻找一个 <span class="math inline">\(p+1\)</span> 维向量 <span class="math inline">\(\omega\)</span>, 使得对于任何 <span class="math inline">\(i=1,2,\cdots,N\)</span> 都有： <span class="math display">\[\omega^T\overrightarrow{x_i}&gt; 0\]</span></p>
<span id="more"></span>
<!--算法流程图-->
<h3 id="算法流程">3. 算法流程</h3>
<hr />
<p><span class="math display">\[\begin{aligned}
&amp; \textbf{Input: }\overrightarrow{x_1},\overrightarrow{x_2},\ldots,\overrightarrow{x_N}\\
&amp; \textbf{Output: }\omega  \\
&amp; _\textbf{1} \quad \omega=
\begin{bmatrix}
0 \\ 0 \\ \vdots \\ 0   
\end{bmatrix};\\
&amp;_\textbf{2} \quad FLAG=1;\\
&amp;_\textbf{3} \quad \textbf{while }FLAG \textbf{ do}\\
&amp;_\textbf{4} \quad \qquad FLAG=0;\\
&amp;_\textbf{5} \quad \qquad \textbf{for }i=1:N\;\textbf{do}\\
&amp;_\textbf{6} \quad\qquad\qquad \textbf{if }\omega^T\overrightarrow{x_i}\le 0 \textbf{ then}\\
&amp;_\textbf{7} \quad \qquad\qquad\qquad \omega=\omega+\overrightarrow{x_i};\\
&amp;_\textbf{8} \quad \qquad\qquad\qquad FLAG=1;\\
&amp;_\textbf{9} \quad \qquad\qquad \textbf{end}\\
&amp;_\textbf{10} \quad \qquad \textbf{end}\\
&amp;_\textbf{11} \quad \textbf{end}\\
&amp;_\textbf{12} \quad \textbf{return }w;\\
\end{aligned}
\]</span></p>
<hr />
<h3 id="算法收敛性证明">4. 算法收敛性证明</h3>
<p><strong>定理1</strong> 对于所有的 <span class="math inline">\(N\)</span> 个向量 <span class="math inline">\(\overrightarrow{x_1},\overrightarrow{x_2},\ldots,\overrightarrow{x_N}\)</span>，如果存在一个向量 <span class="math inline">\(\omega_{opt}\)</span> 使得 <span class="math inline">\(\omega_{opt}^T\overrightarrow{x_i}&gt;0\)</span> 对于所有的 <span class="math inline">\(i={1,2,\ldots,N}\)</span> 都成立，则 <strong>3</strong> 中描述的算法一定能够找到一个 <span class="math inline">\(\omega\)</span>，使得 <span class="math inline">\(\omega_{opt}^T\overrightarrow{x_i}&gt;0\)</span> 对于所有 <span class="math inline">\(i={1,2,\ldots,N}\)</span> 都成立。且算法的收敛性不取决于 <span class="math inline">\(\omega\)</span> 的初值选择。 <strong>证明</strong> 我们可以假设 <span class="math inline">\(\lVert \omega_{opt} \Vert=1\)</span>。因为对于找到的超平面 <span class="math inline">\(\omega_{opt}\)</span>，我们总可以乘以一个系数，使得<span class="math inline">\(\omega_{opt}\)</span> 模长为1. 我们记<span class="math inline">\(\omega(k)\)</span> 为<span class="math inline">\(\omega\)</span> 的第 <span class="math inline">\(k\)</span> 次迭代值。然后我们有： 1. 如果对于所有的 <span class="math inline">\(i={1,2,\ldots,N} \omega(k)^T\overrightarrow{x_i}&gt;0\)</span> 都成立，则算法直接成立 2. 否则，假设第 <span class="math inline">\(k\)</span> 次时，有<span class="math inline">\(\omega(k)^T\overrightarrow{x_i}&lt;0\)</span></p>
<p>然后我们根据算法更新参数 <span class="math display">\[\omega(k+1)=\omega(k)+\overrightarrow{x_i}\]</span> 然后我们有： <span class="math display">\[\omega(k+1)-a\omega_{opt}=\omega(k)-a\omega_{opt}+\overrightarrow{x_i}\]</span> 两边同时取模，则有： <span class="math display">\[
\begin{aligned}
  &amp;{\|\omega(k+1)-a\omega_{opt}\|}^2 \\
= &amp;{\|\omega(k)-a\omega_{opt}+\overrightarrow{x_i}\|}^2 \\
= &amp;{\|\omega(k)-a\omega_{opt}\|}^2+{\|\overrightarrow{x_i}\|}^2+2\omega(k)^T\overrightarrow{x_i}-2a\omega_{opt}^T\overrightarrow{x_i}
\end{aligned}
\]</span> 这里 a 是一个正数，我们之后再具体讨论它的数值。因为 <span class="math inline">\(\omega(k)^T\overrightarrow{x_i}&lt;0\)</span>，因此我们有： <span class="math display">\[
\begin{aligned}
    &amp;{\|\omega(k+1)-a\omega_{opt}\|}^2 \\
\le &amp;{\|\omega(k)-a\omega_{opt}\|}^2+{\|\overrightarrow{x_i}\|}^2-2a\omega_{opt}^T\overrightarrow{x_i}
\end{aligned}
\]</span> 我们定义 <span class="math inline">\(\beta=\max_{i=1}^{N}\lVert\overrightarrow{x_i}\lVert\)</span>，<span class="math inline">\(\gamma=\min_{i=1}^{N}(\omega_{opt}^T\overrightarrow{x_i})\)</span> 易得 <span class="math inline">\(\beta,\gamma&gt;0\)</span>。此时当 <span class="math inline">\(a=\frac{\beta^2+1}{2\gamma}\)</span> 并带入，很容易得到： <span class="math display">\[
{\|\omega(k+1)-a\omega_{opt}\|}^2 \le {\|\omega(k)-a\omega_{opt}\|}^2 -1 
\]</span> 我们定义 <span class="math inline">\(D=\lVert\omega(0)-\omega_{opt}\lVert\)</span>。基于上式我们可以得到，每迭代一次 <span class="math inline">\(\omega\)</span> 与<span class="math inline">\(\omega_{opt}\)</span>的距离减少1，因此至多迭代 <span class="math inline">\(D^2\)</span> 次，<span class="math inline">\(\omega\)</span> 就会收敛到<span class="math inline">\(\omega_{opt}\)</span>。</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Proof</tag>
        <tag>Alogrithm</tag>
      </tags>
  </entry>
</search>
